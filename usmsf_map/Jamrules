#
# necessary environ variables
#
# UASYS_PRODUCT
#   system product defintion
#   currently available : SCP, HLR, GMLC
#   it adds -DUA_$(UASYS_PRODUCT) to $(DEF_COMMON)
#
# UASYS_RELEASE
#   release definition
#   only valid in the corresponding $(UASYS_PRODUCT) scope
#   
# UASYS_DBTYPE
#   database used definition
#   currntly available : ALTIBASE, SDPALTIBASE, MMDB, SDPMMDB
#
#
# UASYS_HOME
#   the directory where library and binary files generated
#   will be installed when run 'jam install'
#
# - modlue common -
# UALIB_SRC_HOME
# UANGIN_SRC_HOME
# OAM_SRC_HOME
#
#
###############################################################
# History
#
# 2003/03/07 hsjang
#   use $(UALIB_SRC_HOME)/config/Jamfile 
###############################################################


#
# Setup Source directory
# We get source directory from environment variable UANGIN_SRC_HOME
#
TOP = $(SMSC_SRC_HOME) ;
UALIB = $(UALIB_SRC_HOME) ;
SMSCHOME = $(UASYS_HOME) ;

SYS_SHAREDCCFLAGS = -g ; # -O -g3 ;

#
#
# Include Common Jamfile
#
#SubInclude UALIB_SRC_HOME config ;
include $(UALIB_SRC_HOME)/config/Jamfile ;

SYS_CCFLAGS += -D_UNISMSC -D_NOTUSED_SYNC -DREAD_CONFIRM -D_UNISMC -DNOTUSED_MMC_TON_NPI -DUSIGTRAN ; # -O -g3 ;

# PKG_VER_MANAGEMENT
PACKAGE_VERSION        = YTL_SMSG_2.0.4 ;
PACKAGE_NAME           = TOTAL_PKG ;

#
# add TOED flag for time optimized asn library
if $(UASYS_ASNLIB) = TOED {
    SYS_CCFLAGS += -DTOED ;
    SYS_SHAREDCCFLAGS += -DTOED ;
}

if $(SMSC_BUILD) = DEV {
    SYS_CCFLAGS += -DSMSC_BUILD_DEV ;
    SYS_SHAREDCCFLAGS += -DSMSC_BUILD_DEV ;
}


if $(OS) = HPUX
{

    WARNING_FLAGS =
        ;

    SYS_CCFLAGS += $(WARNING_FLAGS) ;
    SYS_SHAREDCCFLAGS += $(WARNING_FLAGS) ;

	if $(HP_AIN_VERSION) = HP_STACK_DUAL
	{
		# Yeman
		HP_SS7_LIB = -L$(HP_AIN_SS7_HOME)/lib -lSS7utilWBB -lntl ;
	}
	else
	{
		# KTF young_in
		HP_SS7_LIB = -L$(HP_AIN_SS7_HOME)/../SS7_WBB/sharedlib -lSS7util -lntl ;
	}

	OSS_LIB    = -L$(OSS_HOME)/lib -lasn1code ;
} 
else if $(OS) = LINUX
{
	WARNING_FLAGS = ;

	SYS_CCFLAGS += $(WARNING_FLAGS) ;
	SYS_SHAREDCCFLAGS += $(WARNING_FLAGS) ;

	OSS_LIB    = -L$(OSS_HOME)/lib -lasn1code -ldl -lm ;
}
else 
{
	OSS_LIB    = -L$(OSS_HOME)/lib -lasn1code ;
}


rule SmsDbSchema
{
    local _i ;
    local _t ;
    for _i in $(1)
    {
        _t = [ FGristFiles db_header_$(_i).h ] ;
        _t2 = [ FGristFiles db_server_$(_i).c ] ;
        _t4 = [ FGristFiles mk_$(_i).mak ] ;
        _t5 = [ FGristFiles mk_$(_i).p ] ;
        _s = [ FGristFiles $(_i:S=.sch) ] ;

        SEARCH on $(_s) = $(SEARCH_SOURCE) ;
        LOCATE on $(_t) = $(LOCATE_TARGET) ;
        LOCATE on $(_t2) = $(LOCATE_TARGET) ;
        LOCATE on $(_t4) = $(LOCATE_TARGET) ;

        Clean clean : $(_t) ;
        Clean clean : $(_t2) ;
        Clean clean : $(_t3) ;
        Clean clean : $(_t4) ;
        Clean clean : $(_t5) ;

        Depends obj : $(_t) ;
        Depends obj : $(_t2) ;
        Depends $(_t) : $(_s) ;
        Depends $(_t2) : $(_s) ;
        Depends $(_t3) : $(_s) ;

        LOCATE on db_header_$(_i).h = $(TOP)/inc/MMDB ;

		Depends db_header_$(_i).h : $(_t) ;
        SchemaCompile $(_t) $(_t2) $(_t3) : $(_s) ;

        Depends first : db_header_$(_i).h ;

        CopySchemaHdr db_header_$(_i).h : $(_t) ;
	}
}

actions SchemaCompile
{
    $(UASYS_HOME)/bin/new_schema $(SCHEMA_CPP_OPTIONS) $(2) #schema -> new_schema by JW
}

actions CopySchemaHdr
{
    cp $(2) $(TOP)/inc/MMDB
}
