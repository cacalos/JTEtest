<?xml version="1.0" encoding="UTF-8"?>

<!-- dictionary configuration -->
<!ELEMENT dictionary (parser, display, vendor*, typedef*, error*, avp*, base, application*)>
     
<!-- uDIAMETER message parser option configuration 값 -->
<!ELEMENT parser (version, no_check_header_flag, check_unknown_cmd, check_unknown_avp,
				check_mandatory_avp_length, check_empty_group, check_avprule,
				check_required_length)>
<!ATTLIST parser
	version CDATA #IMPLIED <!-- DIAMETER message version (default : 1) -->
	<!-- DIAMETER Message Header Flag bits 값 오류를 체크하지 않는다. (default : no) -->
	no_check_header_flag ("yes" | "no" | "true" | "false" | "on" | "off") "no"
	<!-- Unknown command 전달되었음을 체크할 것인지 여부 (default : no) -->
	check_unknown_cmd ("yes" | "no" | "true" | "false" | "on" | "off") "no"
	<!-- Unknown AVP가 전달되었음 체크할 것인지 여부 (default : no) -->
	check_unknown_avp ("yes" | "no" | "true" | "false" | "on" | "off") "no"
	<!-- Mandatory AVP의 길이가 0인지 체크할것인지 여부 (default : no) -->
	check_mandatory_avp_length ("yes" | "no" | "true" | "false" | "on" | "off") "no"
	<!-- group이 empty일 경우 에러를 발생시킬 것인지 여부 (default : no) -->
	check_empty_group ("yes" | "no" | "true" | "false" | "on" | "off") "no"
	<!-- avp rule을 사용해 avplist를 검증할 것인지 여부 (default : no) -->
	check_avprule ("yes" | "no" | "true" | "false" | "on" | "off") "no"
	<!-- required AVP의 길이가 0인지 체크할것인지 여부 (default : no) -->
	check_required_length ("yes" | "no" | "true" | "false" | "on" | "off") "no"
>
<!ELEMENT version (#PCDATA)> <!-- DIAMETER message version (default : 1) -->
<!ELEMENT no_check_header_flag (#PCDATA)> <!-- DIAMETER Message Header Flag bits 값 오류를 체크하지 않는다. (default : no) -->
<!ELEMENT check_unknown_cmd (#PCDATA)> <!-- Unknown command 전달되었음을 체크할 것인지 여부 (default : no) -->
<!ELEMENT check_unknown_avp (#PCDATA)> <!-- Unknown AVP가 전달되었음 체크할 것인지 여부 (default : no) -->
<!ELEMENT check_mandatory_avp_length (#PCDATA)> <!-- Mandatory AVP의 길이가 0인지 체크할것인지 여부 (default : no) -->
<!ELEMENT check_empty_group (#PCDATA)> <!-- group이 empty일 경우 에러를 발생시킬 것인지 여부 (default : no) -->
<!ELEMENT check_avprule (#PCDATA)> <!-- avp rule을 사용해 avplist를 검증할 것인지 여부 (default : no) -->
<!ELEMENT check_required_length (#PCDATA)> <!-- required AVP의 길이가 0인지 체크할것인지 여부 (default : no) -->

<!-- uDIAMETER message display option --> 
<!ELEMENT display (tabsize, octnbline, octflags, timeformat)>,
<!ATTLIST display
	tabsize CDATA #IMPLIED <!-- avp depth 별 tab 크기 (default : 0 [TAB 사용])-->
	octnbline CDATA #IMPLIED <!-- octet의 한줄당 byte 출력 개수 (default : 16) -->
	<!-- octet 출력 flags (0x01: number disable, 0x02: ascii disable, 0x04: newline char)  (default : 0x03) -->
	octflags CDATA #IMPLIED
	<!-- time value 출력 format. 특수 문자가 들어가므로 CDATA로 표기할 것을 권함 (default : %Y-%m-%dT%H:%H:%S) -->
	timeformat CDATA #IMPLIED
>
<!ELEMENT tabsize EMPTY> <!-- avp depth 별 tab 크기 (default : 0 [TAB 사용])-->
<!ELEMENT octnbline EMPTY> <!-- octet의 한줄당 byte 출력 개수 (default : 16) --> 
<!-- octet 출력 flags (0x01: number disable, 0x02: ascii disable, 0x04: newline char)  (default : 0x03) -->
<!ELEMENT octflags EMPTY> 
<!-- time value 출력 format. 특수 문자가 들어가므로 CDATA로 표기할 것을 권함 (default : %Y-%m-%dT%H:%H:%S) -->
<!ELEMENT timeformat EMPTY>

<!-- vendor id 정보 -->
<!ELEMENT vendor EMPTY>
<!ATTLIST vendor
	id CDATA #REQUIRED <!-- vendor id (ex: 10415) -->
	name CDATA #REQUIRED <!-- vendor name (ex: 3GPP) -->
>

<!-- type definition 정보 --> 
<!ELEMENT typedef EMPTY>
<!ATTLIST typedef
	name ID #REQUIRED <!-- type 이름 -->
	parent IDREF #IMPLIED <!-- 부모 type 이름 -->
>

<!-- error definition 정보 --> 
<!ELEMENT error EMPTY>
<!ATTLIST error
	code CDATA #REQUIRED <!-- error code -->
	name ID #REQUIRED <!-- error 이름 -->
>

<!-- AVP definition 정보 -->
<!ELEMENT avp ((type | grouped | enumerated))>
<!ATTLIST avp
	name ID #REQUIRED <!-- AVP 이름 -->
	code CDATA #REQUIRED <!-- AVP code -->
	vendor_id CDATA #IMPLIED <!-- AVP vendor id -->
	mandatory (must | may | mustnot | shouldnot) "may" <!-- mandatory 여부 -->
	protected (must | may | mustnot | shouldnot) "may" <!-- protected 여부 -->
	<!-- 출력 옵션 (hexstr: STRING일 경우 HEX값 형태로 출력, hexval: 출력 시 HEX 값도 같이 출력,
			rsltcode : 해당 int 값의 result code 이름도 같이 출력)  -->
	display (default | hexstr | hexval | rsltcode) "default"
	description CDATA #IMPLIED <!-- avp 에 대한 설명 -->
>
<!-- AVP type 정보 -->
<!ELEMENT type EMPTY>
<!ATTLIST type
	name IDREF #REQUIRED <!-- AVP type 이름 -->
>
<!-- AVP group 타입에 구조 정보 -->
<!ELEMENT grouped (fixed*, required*, optional*)>
<!-- AVP enumerated 타입에 대한 정보 -->
<!ELEMENT enumerated (enum*)>
<!-- AVP enum 멤버에 대한 정보 -->
<!ELEMENT enum EMPTY>
<!ATTLIST enum
	name CDATA #REQUIRED <!-- enum name -->
	code CDATA #IMPLIED <!-- enum code value -->
>

<!-- request message 구조 정보 -->
<!ELEMENT requestrules (fixed*, required*, optional*)>
<!-- answer message 구조 정보 -->
<!ELEMENT answerrules (fixed*, required*, optional*)>

<!-- fixed 형식의 avp rule -->
<!ELEMENT fixed (avprule+)>
<!-- required 형식의 avp rule -->
<!ELEMENT required (avprule+)>
<!-- optional 형식의 avp rule -->
<!ELEMENT optional (avprule+)>

<!-- AVP rule 정보 -->
<!ELEMENT avprule EMPTY>
<!ATTLIST avprule
	name IDREF #REQUIRED <!-- avp의 이름 -->
	maximum CDATA "none" <!-- 가질 수 있는 최대 AVP의 개수 -->
	minimum CDATA "0" <!-- 가져야 하는 최소 AVP의 개수 -->
	max CDATA "none" <!-- 가질 수 있는 최대 AVP의 개수 -->
	min CDATA "0" <!-- 가져야 하는 최소 AVP의 개수 -->
	trace_id CDATA #IMPLIED  <!-- 해당 AVP가 trace id로 사용될것인지 여부 -->
>

<!-- base application (IETF 기본 : app_id=0) 정보들 -->
<!ELEMENT base (command*, typedef+, avp+)>
<!ATTLIST base
	uri CDATA #IMPLIED <!-- base application specification uri -->
>

<!-- application 정보들 -->
<!ELEMENT application (command*, typedef*, avp*)>
<!ATTLIST application
	id CDATA #REQUIRED <!-- application id -->
	name CDATA #IMPLIED <!-- application name 또는 interface name -->
	uri CDATA #IMPLIED <!-- application specification uri -->
>

<!-- command 정보 -->
<!ELEMENT command (requestrules*, answerrules*)>
<!ATTLIST command
	name CDATA #REQUIRED <!-- command 이름 -->
	code CDATA #REQUIRED <!-- command code -->
	application-id CDATA #IMPLIED <!-- 사용할 application-id -->
	abbreviation CDATA #IMPLIED <!-- command 이름 축약형 -->
	proxiable ("yes" | "no" | "true" | "false" | "on" | "off") "yes" <!-- proxying 가능한지 여부. (default : yes) -->
	description CDATA #IMPLIED <!-- command 에 대한 설명 -->
>


