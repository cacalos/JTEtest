##
#
#  <console_msg>      ::= <define_list> <msg_list>
#  <define_list>      ::= <define_list> <const_define>
#                        | <const_define>
#  <const_define>     ::= DEFINE <define_name> <define_number>
#  <msg_list>         ::= <msg_list> <msg>
#                       | <msg>
#  <msg>              ::= MESSAGE <msg_name> <statement> END
#  <statement>        ::= <print_statement>
#                       | <if_statement>
#						|
#  <if_statement>     ::= IF ( <condition> ) THEN <statement>
#                       | IF ( <condition> ) THEN <statement> 
#						                     ELSE <statement>
#  <print_statement>  ::= PRINT <format>
#                       | PRINT <format> , <arg_list>
#  <condition>        ::= <condition> AND <relation>
#                       | <condition> OR <relation>
#						| NOT <relation>
#                       | <relation>
#  <relation>         ::= <expr> <  <expr>
#                       | <expr> <= <expr>
#                       | <expr> >  <expr>
#                       | <expr> >= <expr>
#                       | <expr> == <expr>
#                       | <expr> != <expr>
#  <format>           ::= <qstring>
#  <arg_list>         ::= <arg_list> , <arg>
#                       | <arg>
#  <arg>              ::= <expr>
#                       | <string_value>
#  <expr>             ::= <number>
#                       | <reserved_value>
#                       | <define_value>
#                       | <expr> | <expr>
#                       | <expr> & <expr>
#  <reserved_value>   ::= VALUE ( <value_index> )
#                       | STATUS
#  <string_value>     ::= STRVAL ( <value_index> )
#  <define_value>     ::= WORD
#  <msg_name>         ::= WORD
#  <value_index>      ::= NUMBER
#  <number>           ::= NUMBER
#  <define_number>    ::= NUMBER
#  <define_name>      ::= WORD
#  <qstring>          ::= QSTRING
#
#
#
# IF 조건문
#    IF condition statement [ELSE statement]*
#
# PRINT 문
#    PRINT format [,argument]* 
#
#
# CONSOLE 메세지 정보 지정 포멧
#
# MESSAGE msg_name
# 	if_statement | print_statement
# END
#
#
#  VALUE(#)  : pMsr->intValue[#]
#  STATUS    : pAlm->status
#
#
# COMMON_MESSAGE 는 모든 콘솔메세지 이전에 적용되어
# 출력될 문자열이 만들어졌을 경우 이것을 콘솔메세지로 사용한다.

DEFINE NORMAL     0
DEFINE MINOR      1
DEFINE MAJOR      2
DEFINE CRITICAL   3
DEFINE MASKED     4
DEFINE KILL_BY_USER     1
DEFINE FLAG_UNUSED		0
DEFINE IFF_UP           1
DEFINE IFF_RUNNING      64
DEFINE DELETED			1
DEFINE DIA_PEER_DEL     2

MESSAGE COMMON_MSG
    IF  ( STATUS == MASKED ) THEN PRINT "ALARM_MASKED"
END

MESSAGE CPU_USAGE      
    IF   ( STATUS == NORMAL )
	THEN PRINT "NORMAL STATE"
    ELSE PRINT "CPU USAGE %g%%", VALUE(0)
END

MESSAGE MEMORY_USAGE      
    IF   ( STATUS == NORMAL )
	THEN PRINT "NORMAL STATE"
    ELSE PRINT "MEMORY USAGE %g%%", VALUE(0)
END

MESSAGE DISK_USAGE
    IF   ( STATUS == NORMAL )
	THEN PRINT "NORMAL STATE"
    ELSE PRINT "DISK USAGE %g%%", VALUE(1)
END

MESSAGE DISK_IO
    IF   ( STATUS == NORMAL )
	THEN PRINT "NORMAL STATE"
    ELSE PRINT "DISK IO USAGE %g%%", VALUE(1)
END

MESSAGE PROC_STATUS
    IF   ( STATUS == NORMAL )
	THEN PRINT "%s PROCESS IS ALIVE", STRVAL(0)
	ELSE IF ( VALUE(5) == KILL_BY_USER )
		THEN PRINT "%s PROCESS IS DEAD BY USER", STRVAL(0)
		ELSE PRINT "%s PROCESS IS DEAD ABNORMALY", STRVAL(0)
END

MESSAGE PROC_MSGQ
    PRINT "MESSAGE QUEUE USAGE %g%%, COUNT %.0f", VALUE(14), VALUE(7)
END

MESSAGE NET_INTERFACE
    IF  ( STATUS == NORMAL )
    THEN PRINT  "NETIF %s STATUS RUNNING", STRVAL(0)
    ELSE IF ( VALUE(2) & IFF_UP == 1 )
         THEN PRINT "NETIF %s STATUS UP(NOT RUNNING)", STRVAL(0)
         ELSE PRINT "NETIF %s STATUS DOWN(NOT RUNNING)", STRVAL(0)
END

MESSAGE OMSD_CHANNEL
    IF   ( STATUS == NORMAL )
	THEN PRINT "WATCH CHANNEL IS CONNECTED WITH %s", STRVAL(0)
    ELSE PRINT "WATCH CHANNEL IS DISCONNECTED WITH %s", STRVAL(0)
END	

MESSAGE MYSQL_REPL_CHANNEL
    IF   ( STATUS == NORMAL )
    THEN PRINT "REPLICATION CHANNEL IS NORMAL"
    ELSE PRINT "REPLICATION CHANNEL IS ABNORMAL"
END

MESSAGE FILE_COUNT
    PRINT "THE NUMBER OF FILES ARE %.0f", VALUE(1)
END

MESSAGE FILE_UPDATE_TIME
    PRINT "FILES HAVE NOT BEEN UPDATED FOR %.0f (sec)", VALUE(7)
END

#MESSAGE ZOMBIE_COUNT
#	PRINT "ZOMBIE PROCESS COUNT %.0f", VALUE(1)
#END

MESSAGE FD_COUNT
	PRINT "THE NUMBER OF TOTAL FD ARE %.0f", VALUE(3)
END

MESSAGE CPU_STATUS
    IF ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "CPU(%s) IS ABNORMAL", STRVAL(0)
END

MESSAGE MEMORY_STATUS
    IF ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "MEMORY(%s:%s) IS ABNORMAL", STRVAL(0), STRVAL(1)
END

MESSAGE DISK_STATUS
    IF ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "DISK(%s) IS ABNORMAL", STRVAL(0)
END

MESSAGE CONTROLLER_STATUS
    IF ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "CONTROLLER(%s) IS ABNORMAL", STRVAL(0)
END

MESSAGE NIC_STATUS
    IF ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "NIC(interface:%s IP:%s) IS ABNORMAL", STRVAL(0), STRVAL(2)
END

MESSAGE POWER_STATUS
    IF ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "LOCATION(%s:%s) POWER IS ABNORMAL", STRVAL(0),STRVAL(1)
END

MESSAGE FAN_STATUS
    IF ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "LOCATION(%s:%s) FAN IS ABNORMAL", STRVAL(0),STRVAL(1)
END

MESSAGE TEMPERATURE_STATUS
    IF ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "LOCATION(%s:%s) TEMPERATURE IS ABNORMAL(%g(C))", STRVAL(0),STRVAL(1),VALUE(3)
END

MESSAGE NTPD_STATUS
    IF ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "NTP DAEMON IS ABNORMAL"
END

MESSAGE HPHEALTH_STATUS
    IF ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "HP HEALTH DAEMON IS ABNORMAL"
END

MESSAGE SYSTEM_FAILOVER
    IF ( VALUE(1) == 0 )
    THEN PRINT "SYSTEM IS STANDBY"
    ELSE PRINT "SYSTEM IS ACTIVE"
END

MESSAGE MMDB_TABLE
    IF   ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "TOO MANY %s (%g)", STRVAL(0), VALUE(1)
END

MESSAGE MEMORY_MMDB
    IF   ( STATUS == NORMAL )
    THEN PRINT "NORMAL STATE"
    ELSE PRINT "MEMORY(MMDB) USAGE %g%%", VALUE(0)
END

MESSAGE USRG_DPC
    IF  ( STATUS == NORMAL )
    THEN PRINT  "DPC NORMAL IN (%s INSTANCE %g)", STRVAL(2), VALUE(3)
    ELSE IF ( VALUE(8) == 0 )
        THEN PRINT  "DPC UNAVAILABLE[%g] CONGESTED[%g] RESTRICTED[%g] IN (%s       INSTANCE %g)",
                VALUE(5), VALUE(6), VALUE(7), STRVAL(2), VALUE(3)
        ELSE PRINT  "DPC UNAVAILABLE[%g] CONGESTED[%g] RESTRICTED[%g] MASKED[%g]   IN (%s INSTANCE %g)",
                VALUE(5), VALUE(6), VALUE(7), VALUE(8), STRVAL(2), VALUE(3)
END

MESSAGE USRG_SSN
    IF  ( STATUS == NORMAL )
    THEN PRINT  "SSN NORMAL IN (%s INSTANCE %g)", STRVAL(2), VALUE(3)
    ELSE IF ( VALUE(6) == 0 )
        THEN PRINT  "SSN ALLOWED[%g] PROHIBITED[%g] IN (%s INSTANCE %g)",
                VALUE(4), VALUE(5), STRVAL(2), VALUE(3)
        ELSE PRINT  "SSN ALLOWED[%g] PROHIBITED[%g] MASKED[%g] IN (%s INSTANCE     %g)",
                VALUE(4), VALUE(5), VALUE(6), STRVAL(2), VALUE(3)
END

MESSAGE USRG_ROUTE
    IF  ( STATUS == NORMAL )
    THEN PRINT  "ROUTE NORMAL IN (%s INSTANCE %g)", STRVAL(2), VALUE(3)
    ELSE IF ( VALUE(8) == 0 )
        THEN PRINT  "ROUTE UNAVAILABLE[%g] CONGESTED[%g] RESTRICTED[%g] IN (%s     INSTANCE %g)",
                VALUE(5), VALUE(6),  VALUE(7), STRVAL(2), VALUE(3)
        ELSE PRINT  "ROUTE UNAVAILABLE[%g] CONGESTED[%g] RESTRICTED[%g] MASKED[%g] IN (%s INSTANCE %g)",
                VALUE(5), VALUE(6), VALUE(7), VALUE(8), STRVAL(2), VALUE(3)
END


MESSAGE USRG_ASSOC
    IF  ( STATUS == NORMAL )
    THEN PRINT  "ASSOC NORMAL IN (%s)", STRVAL(2)
    ELSE IF ( VALUE(6) == 0 )
         THEN PRINT  "ASSOC ASSOCIATING[%g] CLOSE[%g] IN (%s)",
                VALUE(4), VALUE(5), STRVAL(2)
         ELSE PRINT  "ASSOC ASSOCIATING[%g] CLOSE[%g] MASKED[%g] IN (%s)",
                VALUE(4), VALUE(5), VALUE(6), STRVAL(2)
END

MESSAGE USRG_PATH
    IF  ( STATUS == NORMAL )
    THEN PRINT  "PATH NORMAL IN (%s)", STRVAL(2)
    ELSE IF ( VALUE(6) == 0)
         THEN PRINT  "PATH DOWN[%g] STANDBY[%g] IN (%s)",
                VALUE(3), VALUE(5), STRVAL(2)
         ELSE PRINT  "PATH DOWN[%g] STANDBY[%g] MASKED[%g] IN (%s)",
                VALUE(3), VALUE(5), VALUE(6), STRVAL(2)
END

MESSAGE USRG_SG
    IF  ( STATUS == NORMAL )
    THEN PRINT  "SG NORMAL IN (%s INSTANCE %g)", STRVAL(2), VALUE(3)
    ELSE IF ( VALUE(8) == 0)
         THEN PRINT  "SG INACTIVE[%g] DOWN[%g] PENDING[%g] IN (%s INSTANCE %g)",
                VALUE(5), VALUE(6), VALUE(7), STRVAL(2), VALUE(3)
         ELSE PRINT  "SG INACTIVE[%g] DOWN[%g] PENDING[%g] MASKED[%g] IN (%s       INSTANCE %g)",
                VALUE(5), VALUE(6), VALUE(7), VALUE(8), STRVAL(2), VALUE(3)
END

MESSAGE USRG_SGPSG
    IF  ( STATUS == NORMAL )
    THEN PRINT  "SGPSG NORMAL IN (%s INSTANCE %g)", STRVAL(2), VALUE(3)
    ELSE IF ( VALUE(8) == 0 )
         THEN PRINT  "SGPSG INACTIVE[%g] DOWN[%g] CLOSE[%g] IN (%s INSTANCE %g)",
                VALUE(5), VALUE(6), VALUE(7), STRVAL(2), VALUE(3)
         ELSE PRINT  "SGPSG INACTIVE[%g] DOWN[%g] CLOSE[%g] MASKED[%g]  IN (%s     INSTANCE %g)",
                VALUE(5), VALUE(6), VALUE(7), VALUE(8), STRVAL(2), VALUE(3)
END

MESSAGE DIAMETER_SUCC_RATE
    IF   ( STATUS == NORMAL )
    THEN PRINT "DIAMETER SUCCESS RATE %.0f%%", VALUE(19)
    ELSE PRINT "DIAMETER SUCCESS RATE %.0f%%", VALUE(19)
END

MESSAGE ADIF_DIAMETER_CHNL
    IF   ( STATUS == NORMAL )
    THEN IF ( VALUE(2) == DIA_PEER_DEL )
        THEN PRINT "CHANNEL %s DELETED", STRVAL(0)
        ELSE PRINT "CHANNEL %s CONNECTED", STRVAL(0)
    ELSE PRINT "CHANNEL %s DISCONNECTED", STRVAL(0)
END

#MESSAGE DIAMETER_3xxx_RCVERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s 3xxx RCVMSG NORMAL STATUS", STRVAL(0)
#    ELSE PRINT "DIAMETER %s 3xxx RCVMSG over %d STATUS", STRVAL(0),  VALUE(9)
#END

#MESSAGE DIAMETER_4xxx_RCVERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s 4xxx RCVMSG NORMAL STATUS", STRVAL(0)
#    ELSE PRINT "DIAMETER %s 4xxx RCVMSG over %d STATUS", STRVAL(0),  VALUE(10)
#END

#MESSAGE DIAMETER_5xxx_RCVERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s 5xxx RCVMSG NORMAL STATUS", STRVAL(0)
#    ELSE PRINT "DIAMETER %s 5xxx RCVMSG over %d STATUS", STRVAL(0),  VALUE(11)
#END

#MESSAGE DIAMETER_6xxx_RCVERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s 6xxx RCVMSG NORMAL STATUS", STRVAL(0)
#    ELSE PRINT "DIAMETER %s 6xxx RCVMSG over %d STATUS", STRVAL(0),  VALUE(12)
#END

#MESSAGE DIAMETER_3xxx_SNDERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s 3xxx SNDMSG NORMAL STATUS", STRVAL(0)
#    ELSE PRINT "DIAMETER %s 3xxx SNDMSG over %d STATUS", STRVAL(0),  VALUE(20)
#END

#MESSAGE DIAMETER_4xxx_SNDERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s 4xxx SNDMSG NORMAL STATUS", STRVAL(0)
#    ELSE PRINT "DIAMETER %s 4xxx SNDMSG over %d STATUS", STRVAL(0),  VALUE(21)
#END

#MESSAGE DIAMETER_5xxx_SNDERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s 5xxx SNDMSG NORMAL STATUS", STRVAL(0)
#    ELSE PRINT "DIAMETER %s 5xxx SNDMSG over %d STATUS", STRVAL(0),  VALUE(22)
#END

#MESSAGE DIAMETER_6xxx_SNDERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s 6xxx SNDMSG NORMAL STATUS", STRVAL(0)
#    ELSE PRINT "DIAMETER %s 6xxx SNDMSG over %d STATUS", STRVAL(0),  VALUE(23)
#END

#MESSAGE DIAMETER_PEER_3xxx_RCVERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s PEER %s 3xxx RCVMSG NORMAL STATUS", STRVAL(0), STRVAL(1)
#    ELSE PRINT "DIAMETER %s PEER %s 3xxx RCVMSG over %d STATUS", STRVAL(0), STRVAL(1), VALUE(9)
#END

#MESSAGE DIAMETER_PEER_4xxx_RCVERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s PEER %s 4xxx RCVMSG NORMAL STATUS", STRVAL(0), STRVAL(1)
#    ELSE PRINT "DIAMETER %s PEER %s 4xxx RCVMSG over %d STATUS", STRVAL(0), STRVAL(1), VALUE(10)
#END

#MESSAGE DIAMETER_PEER_5xxx_RCVERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s PEER %s 5xxx RCVMSG NORMAL STATUS", STRVAL(0), STRVAL(1)
#    ELSE PRINT "DIAMETER %s PEER %s 5xxx RCVMSG over %d STATUS", STRVAL(0), STRVAL(1), VALUE(11)
#END

#MESSAGE DIAMETER_PEER_6xxx_RCVERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s PEER %s 6xxx RCVMSG NORMAL STATUS", STRVAL(0), STRVAL(1)
#    ELSE PRINT "DIAMETER %s PEER %s 6xxx RCVMSG over %d STATUS", STRVAL(0), STRVAL(1), VALUE(12)
#END


#MESSAGE DIAMETER_PEER_3xxx_SNDERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s PEER %s 3xxx SNDMSG NORMAL STATUS", STRVAL(0), STRVAL(1)
#    ELSE PRINT "DIAMETER %s PEER %s 3xxx SNDMSG over %d STATUS", STRVAL(0), STRVAL(1), VALUE(20)
#END

#MESSAGE DIAMETER_PEER_4xxx_SNDERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s PEER %s 4xxx SNDMSG NORMAL STATUS", STRVAL(0), STRVAL(1)
#    ELSE PRINT "DIAMETER %s PEER %s 4xxx SNDMSG over %d STATUS", STRVAL(0), STRVAL(1), VALUE(21)
#END

#MESSAGE DIAMETER_PEER_5xxx_SNDERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s PEER %s 5xxx SNDMSG NORMAL STATUS", STRVAL(0), STRVAL(1)
#    ELSE PRINT "DIAMETER %s PEER %s 5xxx SNDMSG over %d STATUS", STRVAL(0), STRVAL(1), VALUE(22)
#END

#MESSAGE DIAMETER_PEER_6xxx_SNDERROR
#    IF  ( STATUS == NORMAL )
#    THEN PRINT "DIAMETER %s PEER %s 6xxx SNDMSG NORMAL STATUS", STRVAL(0), STRVAL(1)
#    ELSE PRINT "DIAMETER %s PEER %s 6xxx SNDMSG over %d STATUS", STRVAL(0), STRVAL(1), VALUE(23)
#END

MESSAGE DIAMETER_LICENSE_EXCEED
    IF  ( STATUS == NORMAL )
	THEN PRINT "DIAMETER LICENSE IS NORMAL"
	ELSE PRINT "DIAMETER LICENSE IS EXCEED"
END

MESSAGE SMSC_PEER_CHANNEL
    IF   ( STATUS == NORMAL )
    THEN PRINT "SMSCUDRA PEER CHANNEL IS CONNECTED %s", STRVAL(1)
        ELSE IF ( STATUS == MAJOR )
        THEN PRINT "SMSCUDRA PEER CHANNEL IS OOS STATUS WITH %s(%d)", STRVAL(1), VALUE(4)
        ELSE PRINT "SMSCUDRA PEER CHANNEL IS DISCONNECTED WITH %s", STRVAL(1)
END

MESSAGE ADIF_PEER_CHANNEL
    IF   ( STATUS == NORMAL )
    THEN PRINT "ADIF PEER CHANNEL IS CONNECTED %s", STRVAL(1)
        ELSE IF ( STATUS == MAJOR )
        THEN PRINT "ADIF PEER CHANNEL IS OOS STATUS WITH %s(%d)", STRVAL(1), VALUE(4)
        ELSE PRINT "ADIF PEER CHANNEL IS DISCONNECTED WITH %s", STRVAL(1)
END 

MESSAGE ESME_NODE_STATUS
    IF ( STATUS == NORMAL )
    THEN PRINT "ESME NODE (%s) CONNECTED", STRVAL(0)
    ELSE PRINT "ESME NODE (%s) DISCONNECTED", STRVAL(0)
END 

MESSAGE NTP_CONNECT_STATUS
    IF   ( STATUS == NORMAL )
    THEN PRINT "NTP SERVER(%s) CONNECTED", STRVAL(0)
    ELSE PRINT "NTP SERVER(%s) DISCONNECTED", STRVAL(0)
END

MESSAGE NTP_SYNC_STATUS
    IF   ( STATUS == NORMAL )
    THEN PRINT "NTP SERVER(%s) SYNCED", STRVAL(0)
    ELSE PRINT "NTP SERVER(%s) UNSYNCED", STRVAL(0)
END

MESSAGE SMSC_TPS
    IF   ( STATUS == NORMAL )
    THEN PRINT "TPS IS %g", VALUE(35)
    ELSE PRINT "TPS IS %g", VALUE(35)
END

MESSAGE HLR_FLOWRATE
    IF   ( VALUE(2) >= 100 )
    THEN PRINT "%s_%s OVERLOAD RATE IS 100%%", STRVAL(0), STRVAL(1)
    ELSE PRINT "%s_%s OVERLOAD RATE IS %g%%", STRVAL(0), STRVAL(1), VALUE(2)
END

MESSAGE MSC_FLOWRATE
    IF   ( VALUE(2) >= 100 )
    THEN PRINT "%s_%s OVERLOAD RATE IS 100%%", STRVAL(0), STRVAL(1)
    ELSE PRINT "%s_%s OVERLOAD RATE IS %g%%", STRVAL(0), STRVAL(1), VALUE(2)
END

MESSAGE SGSN_FLOWRATE
    IF   ( VALUE(2) >= 100 )
    THEN PRINT "%s_%s OVERLOAD RATE IS 100%%", STRVAL(0), STRVAL(1)
    ELSE PRINT "%s_%s OVERLOAD RATE IS %g%%", STRVAL(0), STRVAL(1), VALUE(2)
END

MESSAGE HLR_OVERLOAD
    IF   ( STATUS == NORMAL )
    THEN PRINT "%s_%s CALL OVERLOAD CLEARED" , STRVAL(0), STRVAL(1)
    ELSE PRINT "%s_%s CALL OVERLOAD CONTROL", STRVAL(0), STRVAL(1)
END

MESSAGE MSC_OVERLOAD
    IF   ( STATUS == NORMAL )
    THEN PRINT "%s_%s CALL OVERLOAD CLEARED" , STRVAL(0), STRVAL(1)
    ELSE PRINT "%s_%s CALL OVERLOAD CONTROL", STRVAL(0), STRVAL(1)
END

MESSAGE SGSN_OVERLOAD
    IF   ( STATUS == NORMAL )
    THEN PRINT "%s_%s CALL OVERLOAD CLEARED" , STRVAL(0), STRVAL(1)
    ELSE PRINT "%s_%s CALL OVERLOAD CONTROL", STRVAL(0), STRVAL(1)
END


MESSAGE CLUSTER_A_STATUS
    IF   ( STATUS == NORMAL )
    THEN PRINT "CLUSTER NODE A STATUS IS NORMAL"
    ELSE PRINT "CLUSTER NODE A STATUS IS ABNORMAL"
END

MESSAGE CLUSTER_B_STATUS
    IF   ( STATUS == NORMAL )
    THEN PRINT "CLUSTER NODE B STATUS IS NORMAL"
    ELSE PRINT "CLUSTER NODE B STATUS IS ABNORMAL"
END

MESSAGE VIP_STATUS
    IF   ( STATUS == NORMAL )
    THEN PRINT "VIP STATUS IS NORMAL"
    ELSE PRINT "VIP STATUS IS ABNORMAL"
END

MESSAGE PKG_A_STATUS
    IF   ( STATUS == NORMAL )
    THEN PRINT "PACKAGE A STATUS IS NORMAL"
	ELSE PRINT "PACKAGE A STATUS IS ABNORMAL"
END

MESSAGE PKG_B_STATUS
    IF   ( STATUS == NORMAL )
    THEN PRINT "PACKAGE B STATUS IS NORMAL"
    ELSE PRINT "PACKAGE B STATUS IS ABNORMAL"
END

MESSAGE MMDB_OVERLOAD
    IF   ( STATUS == NORMAL )
    THEN PRINT "MMDB USAGE(%g%%) OVERLOAD CLEARED", VALUE(0)
    ELSE PRINT "MMDB USAGE(%g%%) OVERLOAD CONTROL", VALUE(0)
END
